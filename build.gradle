plugins {
    id 'java-gradle-plugin'
    id 'com.gradle.plugin-publish' version '0.10.1'
    id 'groovy'
}

ext {
    thisPluginVersion = project.hasProperty('pluginVersion')?
            project.property('pluginVersion'):
            'snapshot'
}

group = 'org.mikeneck'
version = thisPluginVersion

repositories {
    jcenter()
}

dependencies {
    compileOnly 'org.jetbrains:annotations:19.0.0'
    testImplementation 'junit:junit:4.12'
    testImplementation localGroovy()
}

gradlePlugin {
    plugins {
        graalvmNativeImage {
            id = 'org.mikeneck.graalvm-native-image'
            implementationClass = 'org.mikeneck.graalvm.GraalvmNativeImagePlugin'
        }
    }
}

pluginBundle {
    website = 'https://github.com/mike-neck/graalvm-native-image-plugin'
    vcsUrl = 'https://github.com/mike-neck/graalvm-native-image-plugin'
    description = 'Generates native image via GraalVM'
    tags = ['graalvm', 'native-image']
    plugins {
        graalvmNativeImage {
            displayName = 'GraalVM Native Image Plugin'
        }
    }
}

if (!project.hasProperty('gradle.publish.key') || !project.hasProperty('gradle.publish.secret')) {
    tasks.publishPlugins.enabled(false)
}

sourceSets {
    functionalTest {
        
    }
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)
configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

// Add a task to run the functional tests
task functionalTest(type: Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
}

tasks.compileFunctionalTestJava.dependsOn('pluginDescriptors')

check {
    dependsOn(tasks.functionalTest)
}

task showVersion {
    group = 'help'
    doLast {
        logger.lifecycle("project: ${project.name}")
        logger.lifecycle("group: ${project.group}")
        logger.lifecycle("version: ${project.version}")
        logger.lifecycle("artifact: ${tasks.jar.archiveFileName.orNull}")
        logger.lifecycle("can release plugin: ${tasks.publishPlugins.enabled}")
    }
}
